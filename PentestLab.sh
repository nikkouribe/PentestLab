#!/bin/bash

#########################
#       COLORS          #
#########################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

#########################
#      HELP/USAGE       #
#########################
usage() {
     echo
    echo -e "${GREEN}THE LOCAL PENTESTLAB V1"
    echo -e "-----------------------"
    echo -e "${NC}"
    echo -e "USAGE:${YELLOW} $0 {list|status|info|start|stop} [projectname]${NC}" >&2
    echo -e "       ${RED}Use ${GREEN}$0 check${NC} ${RED}if you want to check your docker installation${NC} "
    echo -e "${NC}"
    echo -e " -------------------------------------------------------"
    echo -e "||  $0 list -${YELLOW} List available projects${NC}         || "
    echo -e "||                                                     || "
    echo -e "||  $0 status -${YELLOW} Show projects status${NC}          || "
    echo -e "||                                                     || "
    echo -e "||  $0 start [proyectname] -${YELLOW} Start project${NC}    || " 
    echo -e "||                                                     || "
    echo -e "||  $0 info [proyectname] -${YELLOW} Show proyect info${NC} || "
    echo -e " -------------------------------------------------------"
    echo
    echo -e " ${GREEN}AVAILABLE DOCKERFILES:"
    echo -e " ----------------------${NC}"
    echo -e "  ${RED}BugBounty${NC}              - Hackersploit (hackersploit/bugbountytoolkit) ${YELLOW}[this is a big image]${NC}"
    echo -e "  ${RED}Mutillidae II${NC}          - Nikolay Golub (citizenstig/nowasp)"
    echo -e "  ${RED}Juice Shop${NC}             - Bjoern Kimminich (bkimminich/juice-shop)"
    echo -e "  ${RED}Security Ninjas${NC}        - OpenDNS Security Ninjas AppSec Training"
    echo
    echo -e "${RED}NOTE:${NC} This script use Docker to create a easy/ligth Pentestlab"
    echo
    exit 1
}

############################################
#              CHECK DOCKER                #
############################################
check_docker() {
    if ! [ -x "$(command -v docker)" ]; then
        echo 
        echo -e "${GREEN}Docker${NC} was not found. Do you want use the auto install ${RED}(for Debain base Linux Distros)?${NC} ${YELLOW}(y/n)${NC} "
        read inst_ans
        if echo -e "$inst_ans" | grep -iq "^y"; then
            echo
            echo -e "${GREEN}Installing...${NC}"
            echo
            docker_install
        else
            echo
            echo "Comeback When Docker is installed"
            exit
        fi
    fi

    if sudo service docker status | grep inactive > /dev/null
    then
        echo 
	    echo -e "${GREEN}Docker${NC} is not running."
	    echo -n "Do you want to start docker now (y/n)?"
	    read answer
	    if echo "$answer" | grep -iq "^y"; then
		    sudo service docker start
	    else
		    echo -e "${RED}Not starting. Script will not be able to run applications${NC}"
	    fi
    fi
    echo
    echo -e "${GREEN}Docker is installed.... Enjoy${NC}"
    echo
}

#########################
#    DOCKER INSTALL     #
#########################
docker_install()
{
    if fuser /var/lib/dpkg/lock > /dev/null 2>&1 
    then 
        echo -e "${YELLOW}Software management (APT) is already running. Cannot install docker right now${NC}"
        echo -e "${YELLOW}Just wait a minute or two and try again${NC}"
        exit
    fi

    sudo apt-get update

    # DEPENDENCIES
    sudo apt-get install \
     ca-certificates \
     curl \
     gnupg-agent \
     lsb-release

    # ADD GPG KEY
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

     echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update

    sudo apt-get install docker-ce docker-ce-cli containerd.io

    # START ON BOOT
    sudo systemctl enable docker
}

#########################
#     LIST ALL APPS     #
#########################
list() {
    echo
    echo -e  " ${GREEN}AVAILABLE APPS" >&2
    echo -e " --------------${NC}"
    echo
    echo -e "${RED}  bugbounty${NC} 	  - Multi-platform bug bounty toolkit for Docker"
    echo -e "${RED}  mutillidae${NC}	  - OWASP Mutillidae II"
    echo -e "${RED}  juiceshop${NC}	  - OWASP Juice Shop"
    echo -e "${RED}  securityninjas${NC}  - OpenDNS Security Ninjas"
    echo
    exit 1
}

#########################
# PROYECT INFO / START  #
#########################
info_bugbounty () 
{
    echo
    echo -e "${RED}A multiplatform bug bounty toolkit that can be installed on Debian/Ubuntu or setup with Docker${NC}"
    echo
    echo -e "The objective of this toolkit is to provide pentesters, "
    echo -e "security researchers and bug bounty hunters with a pre-configured environment"
    echo -e "that has some of the most popular tools and frameworks already installed and configured"
    echo
    echo -e "A complete list of the tools can be found in ${YELLOW}https://hub.docker.com/r/hackersploit/bugbountytoolkit${NC}"
    echo
}

pstartinfo_bugbounty () 
{
    echo
    echo -e "${RED}BugBountyToolkit${NC} is available in ${YELLOW}https://hub.docker.com/r/hackersploit/bugbountytoolkit${NC}"
    echo
}

info_mutillidae () 
{
    echo
    echo -e "${RED}NOWASP (Mutillidae)${NC} is a free, open source, deliberately vulnerable web-application"
    echo -e "providing a target for web-security enthusiest "
    echo -e "OWASP Incubator Project. Leader Jeremy Druin"
    echo
    echo -e "Available at ${YELLOW}https://github.com/webpwnized/mutillidae${NC}"
    echo
}

pstartinfo_mutillidae () 
{
    echo
    echo -e "${RED}OWASP Mutillidae II${NC} now available at ${YELLOW}http://localhost${NC}"
    echo -e "Remember to click on the create database link before you start"
    echo
}

info_juiceshop () 
{
    echo
    echo -e "${RED}OWASP Juice Shop${NC} is an intentionally insecure web application written entirely in JavaScript"
    echo -e "which encompasses the entire range of OWASP Top Ten and other severe security flaws."
    echo
    echo -e "Available at ${YELLOW} https://github.com/bkimminich/juice-shop${NC}"
    echo
}

pstartinfo_juiceshop () 
{
    echo
    echo -e "${RED}OWASP Juice Shop${NC} now available at ${YELLOW}http://localhost:8080/${NC}"
    echo
}

info_securityninjas () 
{
    echo
    echo -e "This hands-on training lab consists of 10 fun real world like hacking exercises,"
    echo -e "corresponding to each of the ${RED}OWASP Top 10 vulnerabilities${NC}"
    echo
    echo -e "Available at ${YELLOW}https://github.com/opendns/Security_Ninjas_AppSec_Training${NC}"
    echo
}

pstartinfo_securityninjas ()
{
    echo
    echo -e "${RED}Open DNS Security Ninjas${NC} site now available at localhost on ${YELLOW}http://localhost/${NC}"
    echo
}

#########################
#       APPS INFO       #
#########################
info () {
  case "$1" in 
    bugbounty)
      info_bugbounty
      ;;
    mutillidae)
      info_mutillidae
    ;;
    juiceshop)
      info_juiceshop
    ;;
    securityninjas)
      info_securityninjas
    ;;
    *) 
      echo "---Unknown Project Name---"
      list
      ;;
  esac  
}

#########################
#     START PROYECT     #
#########################
project_start ()
{
  fullname=$1		
  projectname=$2     	
  dockername=$3  	
  port=$4		
  
  echo
  echo "Starting $fullname"
  echo


  if [ "$(sudo docker ps -aq -f name=$projectname)" ]; 
  then
    echo "Running command: docker start $projectname"
    sudo docker start $projectname
  else
    if [ -n "${4+set}" ]; then
      echo "Running command: docker run --name $projectname --rm -d -p 80:$port $dockername"
      sudo docker run --name $projectname --rm -d -p 80:$port $dockername
    else echo "not set";
      echo "Running command: docker run --name $projectname --rm -d -p 80:$port $dockername"
      sudo docker run --name $projectname --rm -d -p 80:$port $dockername
    fi
  fi
  echo
  echo "DONE!"
  echo
  echo "Docker Running in http://localhost/"
  echo
}

#########################
#      BIG BOUNTY       #
#########################
bugbounty_start ()
{
    fullname=$1		
    projectname=$2     	
    dockername=$3 

    echo
    echo "Starting $fullname"
    echo

    if [ "$(sudo docker ps -aq -f name=$projectname)" ]; 
    then
        echo "Running command: docker start $projectname"
        sudo docker start $projectname
    else
    if [ -n "${3+set}" ]; then
        echo "Running command: docker run --name $projectname -it -d $dockername"
        sudo docker run --name $projectname -it -d $dockername
    else echo "not set";
        echo "Running command: docker run --name $projectname -it -d $dockername"
        sudo docker run --name $projectname -it -d $dockername
    fi
    fi
    echo
    echo "DONE!"
    echo
    echo "BugBountyToolKit is UP!"
    echo
    echo -e "${YELLOW}BugBounty is the only container in this lab that isn't autoremove when stopped (--rm)${NC}"
    echo -e "${YELLOW}Feel free of use 'docker rm bugbounty' to deleted attach to attached or others${NC}"
    echo
}

 #########################
 #      JUICE SHOP       #
 #########################
 juiceshop_start ()
 {
     fullname=$1		
     projectname=$2     	
     dockername=$3
     port=$4 

     echo
     echo "Starting $fullname"
     echo

     if [ "$(sudo docker ps -aq -f name=$projectname)" ]; 
     then
         echo "Running command: docker start $projectname"
         sudo docker start $projectname
     else
     if [ -n "${4+set}" ]; then
         echo "Running command: docker run --name $projectname --rm -d -p 8080:$port $dockername"
         sudo docker run --name $projectname --rm -d -p 8080:$port $dockername
     else echo "not set";
         echo "Running command: docker run --name $projectname --rm -d -p 8080:$port $dockername"
         sudo docker run --name $projectname --rm -d -p 8080:$port $dockername
     fi
      fi
     echo
     echo "DONE!"
     echo
 }

#########################
#     STOP PROYECT     #
#########################
project_stop ()
{
  fullname=$1	# ex. WebGoat 7.1
  projectname=$2     # ex. webgoat7

    echo
    echo -e "${RED}Stopping...${NC} ${GREEN}$fullname${NC}"
    echo
    echo -e "${RED}Running command:${NC} docker stop ${GREEN}$projectname${NC}"
    echo
    sudo docker stop $projectname
}

#########################
#       START APPS      #
#########################
pstart()
{
    case "$1" in
        bugbounty)
            bugbounty_start "BugBountyToolkit" "bugbounty" "hackersploit/bugbountytoolkit"
            pstartinfo_bugbounty
        ;;
        mutillidae)
            project_start "Mutillidae II" "mutillidae" "citizenstig/nowasp" "80"
            pstartinfo_mutillidae
        ;;
        juiceshop)
            juiceshop_start "OWASP Juice Shop" "juiceshop" "bkimminich/juice-shop" "3000"
            pstartinfo_juiceshop
        ;;
        securityninjas)    
            project_start "Open DNS Security Ninjas" "securityninjas" "opendns/security-ninjas" "80"
            pstartinfo_securityninjas
        ;;
        *)
        echo
        echo "ERROR: Project not found" 
        echo
        ;;  
    esac       
}

#########################
#       STOP APPS       #
#########################
pstop()
{
    case "$1" in
        bugbounty)
            project_stop "BugBountyToolkit" "bugbounty"
        ;;
        mutillidae)
            project_stop "Mutillidae II" "mutillidae"
        ;;
        juiceshop)
            project_stop "OWASP Juice Shop" "juiceshop"
        ;;
        securityninjas)
            project_stop "Open DNS Security Ninjas" "securityninjas"
        ;;
        *)
            echo
            echo "ERROR: Project not found" 
            echo
        ;;
    esac  
}

#########################
#     APPS STATUS       #
#########################
pstatus()
{
  if [ "$(sudo docker ps -q -f name=bugbounty)" ]; then
    echo
    echo -e "${RED}Proyect:${NC} BugBountyToolkit        Status: ${GREEN}running${NC}"
    echo
  else
    echo
    echo -e "${RED}Proyect:${NC} BugBountyToolkit        Status: ${RED}not running${NC}"
    echo
  fi
  if [ "$(sudo docker ps -q -f name=mutillidae)" ]; then
    echo
    echo -e "${RED}Proyect:${NC} Mutillidae II		     Status: ${GREEN}running at http://localhost/${NC}"
    echo
  else
    echo
    echo -e "${RED}Proyect:${NC} Mutillidae II           Status: ${RED}not running${NC}"  
    echo
  fi
  if [ "$(sudo docker ps -q -f name=juiceshop)" ]; then
    echo
    echo -e "${RED}Proyect:${NC} OWASP Juice Shop 	 Status: ${GREEN}running at http://localhos:8080/${NC}"
    echo
  else 
    echo
    echo -e "${RED}Proyect:${NC} OWASP Juice Shop 	 Status: ${RED}not running${NC}"  
    echo
  fi
  if [ "$(sudo docker ps -q -f name=securityninjas)" ]; then
    echo
    echo -e "${RED}Proyect:${NC} Security Ninjas  	 Status: ${GREEN}running at http://localhost/${NC}"
    echo
  else 
    echo
    echo -e "${RED}Proyect:${NC} Security Ninjas	 Status: ${RED}not running${NC}"  
    echo
  fi
}

#########################
#      MAIN MENU        #
#########################
case "$1" in
    start)
        if [ -z "$2" ]
            then
                echo
                echo -e "${RED}ERROR: Option start needs project name in lowercase${NC}"
                echo 
                list # CALL LIST ()
                break
        fi
        pstart $2 # CALL PSTART ()
    ;;
    stop)
        if [ -z "$2" ]
            then
                echo
                echo -e "${RED}ERROR: Option stop needs project name in lowercase${NC}"
                echo 
                list # CALL LIST ()
                break
            fi
            pstop $2
        ;;
    list)
        list # CALL LIST ()
    ;;
    status)
        pstatus # CALL PSTATUS ()
    ;;
    info)
        if [ -z "$2" ]
            then
                echo -e "${RED}ERROR: Option info needs project name in lowercase${NC}"
                echo 
                list # CALL LIST ()
                break
        fi
        info $2
    ;;
    check)
             check_docker
        ;;
    *)
        usage
    ;;
esac  